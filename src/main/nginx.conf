# events {}
# 
# http {
#     # Define upstreams
#     # upstream llm_api {
#     #     server llm_api:9191;
#     # }
# 
#     upstream extract_pdf {
#         server extract_pdf:5001;
#     }
# 
#     upstream main_controller {
#         server main_controller:5002;
#     }
# 
#     upstream anki_service {
#         server anki_service:8000;
#     }
# 
#     upstream auth {
#         server auth:5003;
#     }
# 
#     # Logging
#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log;
# 
#     server {
#         listen 80;
#         server_name maguna.me;
# 
#         # Token validation
#         location = /validate-token {
#             internal; # Make it accessible only internally
#             proxy_pass http://auth/validate-token;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header Authorization $http_authorization; # Forward the Authorization header
#         }
# 
#         # Enforce token validation for APIs
#         location / {
#             root /usr/share/nginx/html;
#             # alias /usr/share/nginx/html;
#             index Dashboard.html;
#             try_files $uri $uri/ =404;
#         }
# 
#         # Serve static assets like CSS, JS, and images
#         location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|eot|ttf|otf)$ {
#             root /usr/share/nginx/html;
#             try_files $uri =404;
#             access_log off;
#             expires 30d;
#         }
# 
#         # Route for LLM API
#         # Services with stripped prefixes
#         # location /llm_api/ {
#         #     auth_request /validate-token;
#         #     auth_request_set $auth_status $upstream_status;
#         #     proxy_pass http://llm_api/; # Strip '/llm_api' from the request
#         #     proxy_set_header Host $host;
#         #     proxy_set_header X-Real-IP $remote_addr;
#         #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         # }
# 
#         # Protected API endpoints (require token)
#         location /extract_pdf/ {
#             auth_request /validate-token; # Call the validate-token endpoint
#             auth_request_set $auth_status $upstream_status; # Capture the response status
#             proxy_pass http://extract_pdf/; # Forward the request to the extract_pdf service
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }
# 
#         location /main_controller/ {
#             auth_request /validate-token;
#             auth_request_set $auth_status $upstream_status;
#             proxy_pass http://main_controller/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }
# 
#         location /anki_service/ {
#             auth_request /validate-token;
#             auth_request_set $auth_status $upstream_status;
#             proxy_pass http://anki_service/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }
# 
#         # Error handling
#         location = /error401 {
#             internal;
#             return 401 'Unauthorized: Missing or invalid token';
#         }
# 
#         location = /error403 {
#             internal;
#             return 403 'Forbidden: Invalid token';
#         }
#     }
# }
