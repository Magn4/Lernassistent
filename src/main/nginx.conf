events {}

http {
    # Add MIME types configuration at the beginning of http block
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    types {
        text/css css;
        text/javascript js;
        text/html html;
        image/jpeg jpg jpeg;
        image/png png;
        image/gif gif;
    }

    # Define upstreams
    upstream extract_pdf {
        server extract_pdf:5001;
    }

    upstream main_controller {
        server main_controller:5002;
    }

    upstream anki_service {
        server anki_service:8000;
    }

    upstream auth {
        server auth:5003;
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name maguna.me;

        # Token validation
        location = /validate-token {
            internal; # Make it accessible only internally
            proxy_pass http://auth/validate-token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization; # Forward the Authorization header
        }

        # Enforce token validation for APIs
        location / {
            root /usr/share/nginx/html;
            index Dashboard.html;
            try_files $uri $uri/ =404;

            add_header 'Access-Control-Allow-Origin' $http_origin;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }

        # Serve static assets like CSS, JS, and images
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|eot|ttf|otf)$ {
            root /usr/share/nginx/html;
            try_files $uri =404;
            
            # Add correct MIME type handling
            include /etc/nginx/mime.types;
            
            expires 30d;
            access_log off;
            add_header Cache-Control "public";
        }

        # Update this location block
        location ~* \.css$ {
            root /usr/share/nginx/html;
            add_header Content-Type text/css;
            try_files $uri =404;
            access_log off;
            expires 30d;
        }

        # Protected API endpoints (require token)
        location /extract_pdf/ {
            auth_request /validate-token;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://extract_pdf/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        location /main_controller/ {
            auth_request /validate-token;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://main_controller/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;

            # Allow preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain';
                return 204;
            }
        }

        location /anki_service/ {
            auth_request /validate-token;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://anki_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # Add this to handle CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Error handling
        location = /error401 {
            internal;
            return 401 'Unauthorized: Missing or invalid token';
        }

        location = /error403 {
            internal;
            return 403 'Forbidden: Invalid token';
        }
    }
}
